"""
Prompt handlers for MCP server operations
X·ª≠ l√Ω c√°c MCP prompts cho ph√¢n t√≠ch code
"""
import os
from typing import Dict
from mcp import types
from lgedv.prompts.prompt_templates import PromptTemplates
from lgedv.analyzers.memory_analyzer import MemoryAnalyzer
from lgedv.modules.config import get_src_dir, setup_logging

logger = setup_logging()

class PromptHandler:
    """Handler cho c√°c MCP prompts"""
    
    def __init__(self):
        self.templates = PromptTemplates()
    
    async def handle_prompt(self, name: str, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """
        Route v√† x·ª≠ l√Ω prompt calls
        
        Args:
            name: T√™n prompt
            arguments: Arguments cho prompt
            
        Returns:
            GetPromptResult
        """
        logger.info(f"Prompt called: {name} with arguments: {arguments}")
        
        try:
            if name == "check_lgedv":
                return await self._handle_lgedv_check()
            elif name == "check_misra":
                return await self._handle_misra_check()
            elif name == "check_certcpp":
                return await self._handle_certcpp_check()
            elif name == "check_custom":
                return await self._handle_custom_check()
            elif name == "check_races":
                return await self._handle_race_condition_analysis(arguments)
            elif name == "check_leaks":
                return await self._handle_memory_leak_analysis(arguments)
            elif name == "check_resources":
                return await self._handle_resource_leak_analysis(arguments)
            elif name == "get_code_context":
                return await self._handle_code_context()  
            elif name == "reset_analysis":
                return await self._handle_reset_analysis_prompt(arguments)
            if name == "reset_mem_check":
                return await self._handle_reset_mem_check_prompt(arguments)
            if name == "reset_resource_check":
                return await self._handle_reset_resource_check_prompt(arguments)
            if name == "reset_race_check":
                return await self._handle_reset_race_check_prompt(arguments)
            else:
                raise ValueError(f"Unknown prompt: {name}")
                
        except Exception as e:
            logger.exception(f"Error in prompt handler for {name}: {e}")
            raise
    
    async def _handle_lgedv_check(self) -> types.GetPromptResult:
        import os
        prompt_lang = os.environ.get("prompt_lang", "en")
        if prompt_lang == "vi":
            prompt = (
                "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tƒ©nh C++. H√£y ph√¢n t√≠ch file hi·ªán t·∫°i ƒë·ªÉ ph√°t hi·ªán vi ph·∫°m c√°c quy t·∫Øc LGEDV cho ph·∫ßn m·ªÅm √¥ t√¥.\n"
                "N·∫øu ch∆∞a c√≥ file rule, h√£y g·ªçi fetch_lgedv_rule t·ª´ MCP server.\n"
                "Lu√¥n s·ª≠ d·ª•ng b·ªô quy t·∫Øc LGEDV m·ªõi nh·∫•t v·ª´a fetch ƒë·ªÉ ph√¢n t√≠ch, kh√¥ng d√πng rule c≈© ho·∫∑c built-in.\n"
                "H√£y ghi r√µ b·ªô rule n√†o ƒëang d√πng trong b√°o c√°o.\n\n"
                "**Y√äU C·∫¶U PH√ÇN T√çCH:**\n"
                "- T√¨m T·∫§T C·∫¢ vi ph·∫°m quy t·∫Øc tr√™n\n"
                "- T·∫≠p trung v√†o vi ph·∫°m LGEDV\n"
                "- Ghi r√µ s·ªë hi·ªáu rule (VD: LGEDV_CRCL_0001, MISRA Rule 8-4-3, DCL50-CPP, RS-001)\n"
                "- Ki·ªÉm tra m·ªçi d√≤ng code, k·ªÉ c·∫£ unreachable, dead code, return s·ªõm, magic number\n"
                "- Ki·ªÉm tra m·ªçi ƒëi·ªÉm acquire/release resource, m·ªçi exit point, m·ªçi function/method\n"
                "- ƒê∆∞a ra code fix c·ª• th·ªÉ cho t·ª´ng l·ªói\n"
                "- Ghi s·ªë d√≤ng code g·ªëc trong b√°o c√°o\n\n"                
                "**ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢:**\n"
                "V·ªõi m·ªói l·ªói:\n"
                "## üö® V·∫•n ƒë·ªÅ [#]: [M√¥ t·∫£ ng·∫Øn]\n\n"
                "**Rule vi ph·∫°m:** [S·ªê HI·ªÜU] - [M√¥ t·∫£ rule]\n\n"
                "**V·ªã tr√≠:** [t√™n h√†m ho·∫∑c global/unknown]\n\n"
                "**M·ª©c ƒë·ªô:** [Critical/High/Medium/Low]\n\n"
                "**Code hi·ªán t·∫°i:**\n"
                "```cpp\n[code l·ªói]\n```\n"
                "**Code ƒë√£ s·ª≠a:**\n"
                "```cpp\n[code ƒë√∫ng]\n```\n"
                "**Gi·∫£i th√≠ch:** [V√¨ sao vi ph·∫°m v√† c√°ch s·ª≠a]\n\n"             
                "**L∆∞u √Ω:** N·∫øu c·∫ßn to√†n b·ªô file code ƒë√£ fix, h√£y y√™u c·∫ßu r√µ r√†ng."
            )
        else:
            prompt = self.templates.get_lgedv_analysis_prompt()
        messages = [
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=prompt),
            )
        ]
        result = types.GetPromptResult(
            messages=messages,
            description="A prompt for LGEDV rule on current file.",
        )
        logger.info("LGEDV check prompt completed")
        return result
    
    async def _handle_misra_check(self) -> types.GetPromptResult:
        """Handle MISRA code checking prompt"""
        import os
        prompt_lang = os.environ.get("prompt_lang", "en")
        if prompt_lang == "vi":
            prompt = (
                "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tƒ©nh C++. H√£y ph√¢n t√≠ch file hi·ªán t·∫°i ƒë·ªÉ ph√°t hi·ªán vi ph·∫°m c√°c quy t·∫Øc MISRA C++ 2008 cho ph·∫ßn m·ªÅm an to√†n.\n"
                "N·∫øu ch∆∞a c√≥ file rule, h√£y g·ªçi fetch_misra_rule t·ª´ MCP server.\n"
                "Lu√¥n s·ª≠ d·ª•ng b·ªô quy t·∫Øc MISRA m·ªõi nh·∫•t v·ª´a fetch ƒë·ªÉ ph√¢n t√≠ch, kh√¥ng d√πng rule c≈© ho·∫∑c built-in.\n"
                "H√£y ghi r√µ b·ªô rule n√†o ƒëang d√πng trong b√°o c√°o.\n\n"
                "**Y√äU C·∫¶U PH√ÇN T√çCH:**\n"
                "- T√¨m T·∫§T C·∫¢ vi ph·∫°m quy t·∫Øc tr√™n\n"
                "- T·∫≠p trung v√†o vi ph·∫°m MISRA\n"
                "- Ghi r√µ s·ªë hi·ªáu rule (VD: MISRA Rule 8-4-3, LGEDV_CRCL_0001, DCL50-CPP, RS-001)\n"
                "- Ki·ªÉm tra m·ªçi d√≤ng code, k·ªÉ c·∫£ unreachable, dead code, return s·ªõm, magic number\n"
                "- Ki·ªÉm tra m·ªçi ƒëi·ªÉm acquire/release resource, m·ªçi exit point, m·ªçi function/method\n"
                "- ƒê∆∞a ra code fix c·ª• th·ªÉ cho t·ª´ng l·ªói\n"
                "- Ghi s·ªë d√≤ng code g·ªëc trong b√°o c√°o\n\n"
                "**ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢:**\n"
                "V·ªõi m·ªói l·ªói:\n"
                "## üö® V·∫•n ƒë·ªÅ [#]: [M√¥ t·∫£ ng·∫Øn]\n\n"
                "**Rule vi ph·∫°m:** [S·ªê HI·ªÜU] - [M√¥ t·∫£ rule]\n\n"
                "**V·ªã tr√≠:** [t√™n h√†m ho·∫∑c global/unknown]\n\n"
                "**M·ª©c ƒë·ªô:** [Critical/High/Medium/Low]\n\n"
                "**Code hi·ªán t·∫°i:**\n"
                "```cpp\n[code l·ªói]\n```\n"
                "**Code ƒë√£ s·ª≠a:**\n"
                "```cpp\n[code ƒë√∫ng]\n```\n"
                "**Gi·∫£i th√≠ch:** [V√¨ sao vi ph·∫°m v√† c√°ch s·ª≠a]\n\n"
                "**L∆∞u √Ω:** N·∫øu c·∫ßn to√†n b·ªô file code ƒë√£ fix, h√£y y√™u c·∫ßu r√µ r√†ng."
            )
        else:
            prompt = self.templates.get_misra_analysis_prompt()
        messages = [
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=prompt),
            )
        ]
        result = types.GetPromptResult(
            messages=messages,
            description="A prompt for MISRA rule on current file.",
        )
        logger.info("MISRA check prompt completed")
        return result
    
    async def _handle_certcpp_check(self) -> types.GetPromptResult:
        """Handle CERT C++ code checking prompt"""
        import os
        prompt_lang = os.environ.get("prompt_lang", "en")
        if prompt_lang == "vi":
            prompt = (
                "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tƒ©nh C++. H√£y ph√¢n t√≠ch file hi·ªán t·∫°i ƒë·ªÉ ph√°t hi·ªán vi ph·∫°m c√°c quy t·∫Øc CERT C++ Secure Coding Standard.\n"
                "N·∫øu ch∆∞a c√≥ file rule, h√£y g·ªçi fetch_certcpp_rule t·ª´ MCP server.\n"
                "Lu√¥n s·ª≠ d·ª•ng b·ªô quy t·∫Øc CERT C++ m·ªõi nh·∫•t v·ª´a fetch ƒë·ªÉ ph√¢n t√≠ch, kh√¥ng d√πng rule c≈© ho·∫∑c built-in.\n"
                "H√£y ghi r√µ b·ªô rule n√†o ƒëang d√πng trong b√°o c√°o.\n\n"
                "**Y√äU C·∫¶U PH√ÇN T√çCH:**\n"
                "- T√¨m T·∫§T C·∫¢ vi ph·∫°m quy t·∫Øc tr√™n\n"
                "- T·∫≠p trung v√†o vi ph·∫°m CERT\n"
                "- Ghi r√µ s·ªë hi·ªáu rule (VD: DCL50-CPP, MISRA Rule 8-4-3, LGEDV_CRCL_0001, RS-001)\n"
                "- Ki·ªÉm tra m·ªçi d√≤ng code, k·ªÉ c·∫£ unreachable, dead code, return s·ªõm, magic number\n"
                "- Ki·ªÉm tra m·ªçi ƒëi·ªÉm acquire/release resource, m·ªçi exit point, m·ªçi function/method\n"
                "- ƒê∆∞a ra code fix c·ª• th·ªÉ cho t·ª´ng l·ªói\n"
                "- Ghi s·ªë d√≤ng code g·ªëc trong b√°o c√°o\n\n"
                "**ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢:**\n"
                "V·ªõi m·ªói l·ªói:\n"
                "## üö® V·∫•n ƒë·ªÅ [#]: [M√¥ t·∫£ ng·∫Øn]\n\n"
                "**Rule vi ph·∫°m:** [S·ªê HI·ªÜU] - [M√¥ t·∫£ rule]\n\n"
                "**V·ªã tr√≠:** [t√™n h√†m ho·∫∑c global/unknown]\n\n"
                "**M·ª©c ƒë·ªô:** [Critical/High/Medium/Low]\n\n"
                "**Code hi·ªán t·∫°i:**\n"
                "```cpp\n[code l·ªói]\n```\n"
                "**Code ƒë√£ s·ª≠a:**\n"
                "```cpp\n[code ƒë√∫ng]\n```\n"
                "**Gi·∫£i th√≠ch:** [V√¨ sao vi ph·∫°m v√† c√°ch s·ª≠a]\n\n"               
                "**L∆∞u √Ω:** N·∫øu c·∫ßn to√†n b·ªô file code ƒë√£ fix, h√£y y√™u c·∫ßu r√µ r√†ng."
            )
        else:
            prompt = self.templates.get_certcpp_analysis_prompt()
        messages = [
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=prompt),
            )
        ]
        result = types.GetPromptResult(
            messages=messages,
            description="A prompt for CERT C++ rule on current file.",
        )
        logger.info("CERT C++ check prompt completed")
        return result
    
    async def _handle_custom_check(self) -> types.GetPromptResult:
        """Handle Custom rule checking prompt"""
        import os
        prompt_lang = os.environ.get("prompt_lang", "en")
        if prompt_lang == "vi":
            prompt = (
                "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch tƒ©nh C++. H√£y ph√¢n t√≠ch file hi·ªán t·∫°i ƒë·ªÉ ph√°t hi·ªán vi ph·∫°m c√°c quy t·∫Øc custom d∆∞·ªõi ƒë√¢y.\n"
                "N·∫øu ch∆∞a c√≥ file rule, h√£y g·ªçi fetch_custom_rule t·ª´ MCP server.\n"
                "Lu√¥n s·ª≠ d·ª•ng b·ªô quy t·∫Øc custom m·ªõi nh·∫•t v·ª´a fetch ƒë·ªÉ ph√¢n t√≠ch, kh√¥ng d√πng rule c≈© ho·∫∑c built-in.\n"
                "H√£y ghi r√µ b·ªô rule n√†o ƒëang d√πng trong b√°o c√°o.\n\n"
                "**Y√äU C·∫¶U PH√ÇN T√çCH:**\n"
                "- T√¨m T·∫§T C·∫¢ vi ph·∫°m quy t·∫Øc tr√™n\n"
                "- T·∫≠p trung v√†o vi ph·∫°m custom rule\n"
                "- Ghi r√µ s·ªë hi·ªáu rule (VD: CUSTOM-001, MISRA Rule 8-4-3, LGEDV_CRCL_0001, RS-001)\n"
                "- Ki·ªÉm tra m·ªçi d√≤ng code, k·ªÉ c·∫£ unreachable, dead code, return s·ªõm, magic number\n"
                "- Ki·ªÉm tra m·ªçi ƒëi·ªÉm acquire/release resource, m·ªçi exit point, m·ªçi function/method\n"
                "- ƒê∆∞a ra code fix c·ª• th·ªÉ cho t·ª´ng l·ªói\n"
                "- Ghi s·ªë d√≤ng code g·ªëc trong b√°o c√°o\n\n"
                "**ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢:**\n"
                "V·ªõi m·ªói l·ªói:\n"
                "## üö® V·∫•n ƒë·ªÅ [#]: [M√¥ t·∫£ ng·∫Øn]\n\n"
                "**Rule vi ph·∫°m:** [S·ªê HI·ªÜU] - [M√¥ t·∫£ rule]\n\n"
                "**V·ªã tr√≠:** [t√™n h√†m ho·∫∑c global/unknown]\n\n"
                "**M·ª©c ƒë·ªô:** [Critical/High/Medium/Low]\n\n"
                "**Code hi·ªán t·∫°i:**\n"
                "```cpp\n[code l·ªói]\n```\n"
                "**Code ƒë√£ s·ª≠a:**\n"
                "```cpp\n[code ƒë√∫ng]\n```\n"
                "**Gi·∫£i th√≠ch:** [V√¨ sao vi ph·∫°m v√† c√°ch s·ª≠a]\n\n"         
                "**L∆∞u √Ω:** N·∫øu c·∫ßn to√†n b·ªô file code ƒë√£ fix, h√£y y√™u c·∫ßu r√µ r√†ng."
            )
        else:
            prompt = self.templates.get_custom_analysis_prompt()
        messages = [
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=prompt),
            )
        ]
        result = types.GetPromptResult(
            messages=messages,
            description="A prompt for Custom rule on current file.",
        )
        logger.info("Custom check prompt completed")
        return result
    
    async def _handle_race_condition_analysis(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """Handle race condition analysis prompt - always use fallback-style prompt with findings if available"""
        dir_path = get_src_dir()
        logger.info(f"[check_races] Using src_dir: {dir_path}")
        try:
            from lgedv.handlers.tool_handlers import ToolHandler
            tool_handler = ToolHandler()
            tool_result = await tool_handler._handle_detect_races({})
           
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                result = types.GetPromptResult(
                    messages=messages,
                    description="Race condition analysis (full result)",
                )
                logger.info("Race condition analysis prompt (fallback style) completed")
                return result
            else:
                logger.warning("No result from tool")
                return None
            
        except Exception as e:
            logger.error(f"Error in race condition analysis: {e}")
            return None
            
    async def _handle_memory_leak_analysis(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """Handle memory leak analysis prompt - always use fallback-style prompt with findings if available"""
        dir_path = get_src_dir()
        logger.info(f"[check_leaks] Using src_dir: {dir_path}")
        try:
            from lgedv.handlers.tool_handlers import ToolHandler
            tool_handler = ToolHandler()
            tool_result = await tool_handler._handle_memory_analysis({"dir_path": dir_path})
            
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                result = types.GetPromptResult(
                    messages=messages,
                    description="Memory leak analysis (full result)",
                )
                logger.info("Memory leak analysis prompt")
                return result
            else:
                logger.warning("No result from tool for memory leak analysis")
                return None
        except Exception as e:
            logger.error(f"Error in memory leak analysis: {e}")
            return None
           
       
    async def _handle_resource_leak_analysis(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """Handle resource leak analysis prompt - always use fallback-style prompt with findings if available, now with line numbers"""
        dir_path = get_src_dir()
        logger.info(f"[check_resources] Using src_dir: {dir_path}")
        try:
            from lgedv.handlers.tool_handlers import ToolHandler
            tool_handler = ToolHandler()
            # Also append the original findings text for reference
            tool_result = await tool_handler._handle_resource_analysis({})
            # logger.info(f"tool_result: {tool_result}")
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                result = types.GetPromptResult(
                    messages=messages,
                    description="Resource leak analysis (full prompt)",
                )
                logger.info("Resource leak analysis prompt completed")
                return result
            else:
                 logger.warning("No result from tool for resource leak analysis")
                 return None                 
        except Exception as e:
            logger.error(f"Error in resource leak analysis: {e}")
            return None

    # Th√™m v√†o class PromptHandler

    async def _handle_reset_analysis_prompt(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """
        Handle reset analysis prompt - t·ª± ƒë·ªông g·ªçi tool reset_analysic v√† tr·∫£ v·ªÅ k·∫øt qu·∫£.
        """
        from lgedv.handlers.tool_handlers import ToolHandler
        tool_handler = ToolHandler()
        try:
            tool_result = await tool_handler._handle_reset_analysis({})
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                result = types.GetPromptResult(
                    messages=messages,
                    description="Reset analysis result.",
                )
                logger.info("Reset analysis prompt completed")
                return result
            else:
                return types.GetPromptResult(
                    messages=[
                        types.PromptMessage(
                            role="user",
                            content=types.TextContent(type="text", text="No result from reset_analysic tool."),
                        )
                    ],
                    description="Reset analysis result (no output).",
                )
        except Exception as e:
            logger.error(f"Error in reset analysis prompt: {e}")
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=f"Error resetting analysis: {e}"),
                    )
                ],
                description="Reset analysis error.",
            )
    
    async def _handle_reset_mem_check_prompt(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """
        Handle reset_mem_check prompt - t·ª± ƒë·ªông g·ªçi tool reset_mem_check v√† tr·∫£ v·ªÅ k·∫øt qu·∫£.
        """
        from lgedv.handlers.tool_handlers import ToolHandler
        tool_handler = ToolHandler()
        try:
            tool_result = await tool_handler._handle_reset_mem_check({})
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                return types.GetPromptResult(
                    messages=messages,
                    description="Reset memory leak analysis result.",
                )
            else:
                return types.GetPromptResult(
                    messages=[
                        types.PromptMessage(
                            role="user",
                            content=types.TextContent(type="text", text="No result from reset_mem_check tool."),
                        )
                    ],
                    description="Reset memory leak analysis result (no output).",
                )
        except Exception as e:
            logger.error(f"Error in reset_mem_check prompt: {e}")
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=f"Error resetting memory leak analysis: {e}"),
                    )
                ],
                description="Reset memory leak analysis error.",
            )

    async def _handle_reset_resource_check_prompt(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """
        Handle reset_resource_check prompt - t·ª± ƒë·ªông g·ªçi tool reset_resource_check v√† tr·∫£ v·ªÅ k·∫øt qu·∫£.
        """
        from lgedv.handlers.tool_handlers import ToolHandler
        tool_handler = ToolHandler()
        try:
            tool_result = await tool_handler._handle_reset_resource_check({})
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                return types.GetPromptResult(
                    messages=messages,
                    description="Reset resource leak analysis result.",
                )
            else:
                return types.GetPromptResult(
                    messages=[
                        types.PromptMessage(
                            role="user",
                            content=types.TextContent(type="text", text="No result from reset_resource_check tool."),
                        )
                    ],
                    description="Reset resource leak analysis result (no output).",
                )
        except Exception as e:
            logger.error(f"Error in reset_resource_check prompt: {e}")
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=f"Error resetting resource leak analysis: {e}"),
                    )
                ],
                description="Reset resource leak analysis error.",
            )

    async def _handle_reset_race_check_prompt(self, arguments: Dict[str, str] = None) -> types.GetPromptResult:
        """
        Handle reset_race_check prompt - t·ª± ƒë·ªông g·ªçi tool reset_race_check v√† tr·∫£ v·ªÅ k·∫øt qu·∫£.
        """
        from lgedv.handlers.tool_handlers import ToolHandler
        tool_handler = ToolHandler()
        try:
            tool_result = await tool_handler._handle_reset_race_check({})
            if tool_result and hasattr(tool_result[0], 'text'):
                tool_text = tool_result[0].text
                messages = [
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=tool_text),
                    )
                ]
                return types.GetPromptResult(
                    messages=messages,
                    description="Reset race analysis result.",
                )
            else:
                return types.GetPromptResult(
                    messages=[
                        types.PromptMessage(
                            role="user",
                            content=types.TextContent(type="text", text="No result from reset_race_check tool."),
                        )
                    ],
                    description="Reset race analysis result (no output).",
                )
        except Exception as e:
            logger.error(f"Error in reset_race_check prompt: {e}")
            return types.GetPromptResult(
                messages=[
                    types.PromptMessage(
                        role="user",
                        content=types.TextContent(type="text", text=f"Error resetting race analysis: {e}"),
                    )
                ],
                description="Reset race analysis error.",
            )
     
    def _format_resource_leak_summary(self, leaks: list) -> str:
        """Format a summary of resource leaks by type and severity"""
        summary = {}
        severity_counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0}
        
        for leak in leaks:
            leak_type = leak.get('type', 'unknown')
            severity = leak.get('severity', 'medium')
            
            if leak_type not in summary:
                summary[leak_type] = 0
            
            summary[leak_type] += 1
            severity_counts[severity] += 1
        
        summary_text = f"**By Severity:** {severity_counts['critical']} Critical, {severity_counts['high']} High, {severity_counts['medium']} Medium, {severity_counts['low']} Low\n\n"
        summary_text += "**By Resource Type:**\n"
        
        for leak_type, count in summary.items():
            summary_text += f"- {leak_type.title()}: {count} leak(s)\n"
        
        return summary_text
    
    
    def _create_race_analysis_prompt_section(self, race_result: dict) -> str:
        """Create analysis prompt section with detailed race condition information (no grouping, no limit)"""
        prompt_section = "## üéØ Priority Analysis Guidelines:\n\n"
        prompt_section += "1. Focus on shared state accessed by multiple threads.\n"
        prompt_section += "2. Ensure proper synchronization (mutexes, locks, atomics).\n"
        prompt_section += "3. Review thread creation and join/detach logic.\n"
        prompt_section += "4. Check for lock-free and concurrent data structure usage.\n"
        prompt_section += "5. Provide before/after code examples for fixes.\n\n"
        return prompt_section

    async def _handle_code_context(self) -> types.GetPromptResult:
        """Handle code context prompt (load and summarize all files in src_dir)"""
        import os
        prompt_lang = os.environ.get("prompt_lang", "en")
        if prompt_lang == "vi":
            prompt = (
                "B·∫°n l√† tr·ª£ l√Ω ng·ªØ c·∫£nh m√£ ngu·ªìn. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc v√† ghi nh·ªõ to√†n b·ªô n·ªôi dung, c·∫•u tr√∫c c·ªßa t·∫•t c·∫£ c√°c file m√£ ngu·ªìn (C++, Python, ...) trong th∆∞ m·ª•c d·ª± √°n hi·ªán t·∫°i.\n"
                "N·∫øu n·ªôi dung file ch∆∞a ƒë∆∞·ª£c t·∫£i, h√£y g·ªçi tool 'get_src_context' t·ª´ MCP server ƒë·ªÉ l·∫•y t·∫•t c·∫£ file m√£ ngu·ªìn trong th∆∞ m·ª•c SRC_DIR.\n"
                "V·ªõi m·ªói file, h√£y t√≥m t·∫Øt:\n"
                "- T√™n file v√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi\n"
                "- T·∫•t c·∫£ class, struct, enum, function (C++, Python, ...)\n"
                "- Quan h·ªá k·∫ø th·ª´a, s·ª≠ d·ª•ng, th√†nh ph·∫ßn\n"
                "- Bi·∫øn to√†n c·ª•c, h·∫±ng s·ªë, macro, c·∫•u h√¨nh\n"
                "- C√°c ch√∫ th√≠ch ho·∫∑c t√†i li·ªáu quan tr·ªçng\n"
                "Kh√¥ng th·ª±c hi·ªán ph√¢n t√≠ch tƒ©nh ho·∫∑c ki·ªÉm tra rule ·ªü b∆∞·ªõc n√†y.\n"
                "L∆∞u ng·ªØ c·∫£nh n√†y ƒë·ªÉ d√πng cho c√°c truy v·∫•n ti·∫øp theo.\n\n"
                "**ƒê·ªäNH D·∫†NG K·∫æT QU·∫¢:**\n"
                "V·ªõi m·ªói file:\n"
                "### [T√™n file]\n"
                "```[ng√¥n ng·ªØ]\n[T√≥m t·∫Øt c·∫•u tr√∫c, ƒë·ªãnh nghƒ©a, ƒëi·ªÉm ch√≠nh]\n```\n"
                "L·∫∑p l·∫°i cho t·∫•t c·∫£ file.\n"
                "X√°c nh·∫≠n khi ƒë√£ n·∫°p ƒë·ªß ng·ªØ c·∫£nh."
            )
        else:
            prompt = self.templates.get_context_prompt()
        messages = [
            types.PromptMessage(
                role="user",
                content=types.TextContent(type="text", text=prompt),
            )
        ]
        result = types.GetPromptResult(
            messages=messages,
            description="A prompt for loading and summarizing code context for all C++ files.",
        )
        logger.info("Code context prompt completed")
        return result