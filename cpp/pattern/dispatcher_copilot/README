# dispatcher v2
only promise, no future

# install boost, protobuf
sudo apt-get install libboost-all-dev
sudo apt-get install protobuf-compiler libprotobuf-dev

# create protobuf 
mkdir gen
protoc --cpp_out=./gen requestMsg.proto

# build on Linux
cd lib
mkdir build 
cd build
cmake ..
sudo make install

cd test_app/
mkdir build
cd build
cmake ..
sudo make install

# deploy on target board with bitbake
copy test_app/* to
nad/LGE/icon-src/asynctestapp

copy lib/* to
nad/LGE/icon-src/asynctiger

copy asynctiger.bb to nad/LGE/metalayer/meta-icon-nad/receipes-extended/asynctiger/

copy asynctestapp.bb to nad/LGE/metalayer/meta-icon-nad/receipes-extended/asyntestapp


-- build.
::lib
./build.sh target sa525m/apps debug module asynctiger cleanbuild

::app test
./build.sh target sa525m/apps debug module asynctestapp cleanbuild

Note:
can install binary, lib, header 
--> (1) with cmake: install(...) (check cmake file)
--> (2) or with bitbake using do_install() (check bb file)

-- other service (e.g nadproxy) use lib async_tiger.so
---> modify its bb file:
DEPENDS += "asynctiger"

---> modify makefile
e.g nadproxy/service/Makefile.am
nadProxy_CPPFLAGS += -std=c++17
nadProxy_LDFLAGS = -lasync_tiger

---> include below headers
#include "Dispatcher.h"
#include "Message.h"
#include "Promise.h"

-- fix bug c++17 error compiler on tiger
tiger use another typedef for byte 
but c++17 use std::byte
=> tiger need use namespace on byte tydedef
namespace TIGER_DEF {
    typedef byte ...
};

./framework/include/TCUProtocol.h:19:namespace TIGER_DEF {...};

tiger app use namespace: using namespace TIGER_DEF

./services/communication-service/include/CM_Parser.h:30:using namespace TIGER_DEF;
./servicelayer/core/services/communication-service/include/CM_Parser.h:25:using namespace TIGER_DEF;


21.8.2025: refactoring
Event loop voi 1 thread, 
-> (1) ho tro future, promise (error handling support)
-> (2) Ho tro delay task, timer
-> (3) detect CPU-bound task
-> (4) run cpu-bound task in separate thread

TODO: read and write file,pipe async
>cancel task (if not running) 

(1) handle error function vs capture exception(thrown)

(2) Su dung co the timer moi dua tren boost (chay tren main thread, cac callback day vao hang doi cua io_context, chay tuan tu cb, boost su dung timerfd
-> https://grok.com/chat/4f5906ed-712c-4dc3-88af-3066ad4a10d6

(4) timing_func run on separate thread, report_func run on event loop
http://nikhilm.github.io/uvbook/threads.html#id1

