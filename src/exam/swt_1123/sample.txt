#define SWAP(a, b) {int temp = a;a = b;b = temp;}
void Rotate(int sr, int sc, int er, int ec) {
	

	if(sr<er&&sc<ec)
	{
		int a = Mat[sr][sc];
		for (int r = sr + 1; r <= er; r++) {
			SWAP(Mat[r][sc], a);
		}
		for (int c = sc + 1; c <= ec; c++) {
			SWAP(Mat[er][c], a);
		}

		for (int r = er - 1; r >= sr; r--) {
			SWAP(Mat[r][ec], a);
		}
		for (int c = ec - 1; c >= sc; c--) {
			SWAP(Mat[sr][c], a);
		}
	}
}

#include <iostream>
using namespace std;
#define MAXN ((int)2e5)
int N, M;
int ID[MAXN + 10];
int cnt[18];
void InputData(){
	cin >> N >> M;
	for (int i = 0; i < N; i++){
		cin >> ID[i];
	}
	for(int i=0;i<16;i++)
	{
		cnt[i]=0;
	}
}

int main(){
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int ans = 0;
	InputData();//입력
	
	for(int i=0;i<M;i++)
	{
		int a = ID[i];
		for(int j=-1;j<2;j++)
		{
			int b=a+j;
			if(b>=0&&b<16)
			{
				cnt[b]++;
			}
		}
	}
	for(int i=0;i<16;i++)
	{
		//cout<<cnt[i]<<" ";
		if(ans<cnt[i])
		{
			ans=cnt[i];
		}
	}
	if(M==N)
	{
		cout << ans << "\n";//출력
		return 0;
	}
	for(int i=0;i<N-M;i++)
	{
		int ab=0;
		int a= ID[i];
		for(int j=-1;j<2;j++)
		{
			int b=a+j;
			if(b>=0&&b<16)
			{
				cnt[b]--;
			}
		}
		a= ID[M+i];
		for(int j=-1;j<2;j++)
		{
			int b=a+j;
			if(b>=0&&b<16)
			{
				cnt[b]++;
			}
		}
		for(int i=0;i<16;i++)
		{
			if(ab<cnt[i])
			{
				ab=cnt[i];
			}
		}
		//cout<<ab<<endl;
		ans=max(ans,ab);
	}
	cout << ans << "\n";//출력
	return 0;
}

#include <bits/stdc++.h>
using namespace std;

struct node
{
	int x;
	int y;
	int huong;
	bool land=false;
	int so;
	node* west;
	node* south;
	node* nourth;
	node* east;
};


node A[2002][2002];
int N; // 이동 정보의 개수
string Info; // 이동 방향 정보
int sol = 0;

void InputData(void) {
	cin >> N;
	cin >> Info;
	for(int i=0;i<2002;i++)
	{
		for(int j=0;j<2002;j++)
		{
			A[i][j].land=false;
			A[i][j].x=i;
			A[i][j].y=j;
			A[i][j].huong=-1;
			A[i][j].so=0;
		}
	}
}
bool check(int a, int b)
{
	if(a==1&&b==0)
	{
		return false;
	}
	if(a==0&&b==1)
	{
		return false;
	}
	if(a==2&&b==3)
	{
		return false;
	}
	if(a==3&&b==2)
	{
		return false;
	}
	return true;
}
int main(void) {
	InputData();
	node*tmp = &A[1001][1001];
	tmp->land=true;
	for(int i=0;i<N;i++)
	{
		char s =Info[i];
		int g = s-'0';
		if(g==3)
		{
			if(A[tmp->x-1][tmp->y].land==true)
			{
				if(check(tmp->huong,3))
				{
					if(tmp->nourth==nullptr&&A[tmp->x-1][tmp->y].so==0)
					{
						sol++;
					}
				}
			}
			A[tmp->x-1][tmp->y].land=true;
			tmp->nourth=&A[tmp->x-1][tmp->y];
			A[tmp->x-1][tmp->y].south=tmp;
			tmp=&A[tmp->x-1][tmp->y];
			tmp->huong=3;
		}
		if(g==0)
		{
			if(A[tmp->x][tmp->y+1].land==true)
			{
				if(check(tmp->huong,0))
				{
					if(tmp->east==nullptr&&A[tmp->x][tmp->y+1].so==0)
					{
						sol++;
					}
				}
			}
			A[tmp->x][tmp->y+1].land=true;
			tmp->east=&A[tmp->x][tmp->y+1];
			A[tmp->x][tmp->y+1].west=tmp;
			tmp=&A[tmp->x][tmp->y+1];
			tmp->huong=0;
		}
		if(g==2)
		{
			if(A[tmp->x+1][tmp->y].land==true)
			{
				if(check(tmp->huong,2))
				{
					if(tmp->south==nullptr&&A[tmp->x+1][tmp->y].so==0)
					{
						sol++;
					}
				}
			}
			A[tmp->x+1][tmp->y].land=true;
			tmp->south=&A[tmp->x+1][tmp->y];
			A[tmp->x+1][tmp->y].nourth=tmp;
			tmp=&A[tmp->x+1][tmp->y];
			tmp->huong=2;
		}
		if(g==1)
		{
			if(A[tmp->x][tmp->y-1].land==true)
			{
				if(check(tmp->huong,1))
				{
					if(tmp->west==nullptr&&A[tmp->x][tmp->y-1].so==0)
					{
						sol++;
					}
				}
			}
			A[tmp->x][tmp->y-1].land=true;
			tmp->west=&A[tmp->x][tmp->y-1];
			A[tmp->x][tmp->y-1].east=tmp;
			tmp=&A[tmp->x][tmp->y-1];
			tmp->huong=1;
		}
	}

	cout << sol << "\n";
	return 0;
}
