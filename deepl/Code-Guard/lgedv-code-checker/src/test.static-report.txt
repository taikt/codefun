C++ Static Vulnerability Report
Source File: /home/worker/src/extension/lgedv-code-checker/src/test.cpp

=== Clang-Tidy (LGEDV Rules) ===
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:5:9: warning: LGEDV_CRCL_0013: Each case in switch statement must end with a break statement [custom-SwitchBreakCheck]
    5 |         case 1:
      |         ^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:10:9: warning: LGEDV_CRCL_0013: Each case in switch statement must end with a break statement [custom-SwitchBreakCheck]
   10 |         case 3:
      |         ^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:17:5: warning: LGEDV_CRCL_0003: Function 'processNumber' has multiple return points [custom-SingleReturnCheck]
   17 |     return value; 
      |     ^

Errors:
375 warnings generated.
Suppressed 372 warnings (372 in non-user code).


=== Cppcheck Analysis ===
Checking /home/worker/src/extension/lgedv-code-checker/src/test.cpp ...
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:21:1: error: Memory leak: ptr [memleak]
}
^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:20:10: style: Variable 'ptr' can be declared as pointer to const [constVariablePointer]
    int* ptr = new int(42);
         ^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:20:14: style: Variable 'ptr' is assigned a value that is never used. [unreadVariable]
    int* ptr = new int(42);
             ^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:20:10: style: Variable 'ptr' is allocated memory that is never used. [unusedAllocatedMemory]
    int* ptr = new int(42);
         ^
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:19:0: style: The function 'leakMemory' is never used. [unusedFunction]
void leakMemory() {
^
nofile:0:0: information: Active checkers: 161/592 (use --checkers-report=<filename> to see details) [checkersReport]



=== Clang Static Analyzer ===
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:20:10: warning: Value stored to 'ptr' during its initialization is never read [deadcode.DeadStores]
   20 |     int* ptr = new int(42); 
      |          ^~~   ~~~~~~~~~~~
/home/worker/src/extension/lgedv-code-checker/src/test.cpp:21:1: warning: Potential leak of memory pointed to by 'ptr' [cplusplus.NewDeleteLeaks]
   21 | }
      | ^
2 warnings generated.

