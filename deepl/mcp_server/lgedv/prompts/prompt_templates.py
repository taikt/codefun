"""
Prompt templates for different types of code analysis
C√°c template cho prompts ph√¢n t√≠ch code kh√°c nhau
"""

class PromptTemplates:
    """Class ch·ª©a c√°c template cho prompts"""
    
    @staticmethod
    def get_lgedv_analysis_prompt() -> str:
        """Template cho LGEDV analysis"""
        return (
            "You are a C++ static analysis expert. Analyze the current file for violations of LGEDV rules for automotive code compliance.\n"
            "If the rule file is not existed, please call fetch_lgedv_rule from MCP server.\n"
            "Always use the latest LGEDV rules just fetched for analysis, not any cached or built-in rules.\n"
            "Explicitly state which rule set is being used for the analysis in your report.\n\n"
            "**ANALYSIS REQUIREMENTS:**\n"
            "- Find ALL violations of the rules above\n"
            "- Focus specifically on LGEDV rule violations\n"
            "- Cite EXACT rule numbers (e.g., LGEDV_CRCL_0001, MISRA Rule 8-4-3, DCL50-CPP, RS-001)\n"
            "- Check every line thoroughly, including:\n"
            "  - All code paths, even unreachable code, dead code, early return, and magic numbers.\n"
            "  - All resource acquisition and release points.\n"
            "  - All exit points (return, break, continue, goto, throw, etc.).\n"
            "  - All function and method boundaries.\n"
            "- Provide concrete fixes for each violation\n"
            "- Use the original file's line numbers in all reports\n\n"
            "**OUTPUT FORMAT:**\n"
            "For each violation found:\n\n"
            "## üö® Issue [#]: [Brief Description]\n\n"
            "**Rule Violated:** [EXACT_RULE_NUMBER] - [Rule Description]\n\n"
            "**Location:** [function name or global scope/unknown]\n\n"
            "**Severity:** [Critical/High/Medium/Low]\n\n"
            "**Current Code:**\n"
            "```cpp\n[problematic code]\n```\n"
            "**Fixed Code:**\n"
            "```cpp\n[corrected code]\n```\n"
            "**Explanation:** [Why this violates the rule and how fix works]\n\n"
            # "## üîß Complete Fixed Code\n"
            # "```cpp\n[entire corrected file with all fixes applied]\n```\n\n"            
            "**Note:** If you need the complete fixed code file after all fixes, please request it explicitly."
        )

    # @staticmethod
    # def get_lgedv_analysis_prompt() -> str:
    #     """Template cho LGEDV analysis v·ªõi h∆∞·ªõng d·∫´n r√µ r√†ng v·ªÅ format b·∫£ng"""
    #     return (
    #         "You are a C++ static analysis expert. Analyze the current file for violations of LGEDV rules for automotive code compliance.\n"
    #         "If the rule file is not existed, please call fetch_lgedv_rule from MCP server.\n"
    #         "Always use the latest LGEDV rules just fetched for analysis, not any cached or built-in rules.\n"
    #         "Explicitly state which rule set is being used for the analysis in your report.\n\n"
    #         "**ANALYSIS REQUIREMENTS:**\n"
    #         "- Find ALL violations of the rules above\n"
    #         "- Focus specifically on LGEDV rule violations\n"
    #         "- Cite EXACT rule numbers (e.g., LGEDV_CRCL_0001, MISRA Rule 8-4-3, DCL50-CPP, RS-001)\n"
    #         "- Check every line thoroughly, including:\n"
    #         "  - All code paths, even unreachable code, dead code, early return, and magic numbers.\n"
    #         "  - All resource acquisition and release points.\n"
    #         "  - All exit points (return, break, continue, goto, throw, etc.).\n"
    #         "  - All function and method boundaries.\n"
    #         "- Provide concrete fixes for each violation\n"
    #         "- Use the original file's line numbers in all reports\n\n"
    #         "**OUTPUT FORMAT:**\n"
    #         "For each violation found, add a row to the following Markdown table. "
    #         "Each row must be a single line, with all content (including code blocks and explanations) fully contained within its cell, "
    #         "and no blank lines or line breaks outside the table structure. "
    #         "If code or text is long, use triple backticks (```cpp ... ```) or <pre>...</pre> inside the cell, but do not break the table row.\n\n"
    #         "| # | Rule Violated | Location | Severity | Line(s) | Current Code | Fixed Code | Explanation |\n"
    #         "|---|---------------|----------|----------|---------|--------------|------------|-------------|\n"
    #         "|   | [EXACT_RULE_NUMBER] - [Rule Description] | [function name or global/unknown] | [Critical/High/Medium/Low] | [line numbers] | ```cpp [problematic code] ``` | ```cpp [corrected code] ``` | [Why this violates the rule and how fix works] |\n\n"
    #         "**Note:** If you need the complete fixed code file after all fixes, please request it explicitly."
    #     )
        
    @staticmethod
    def get_misra_analysis_prompt() -> str:
        """Template cho MISRA analysis"""
        return (
            "You are a C++ static analysis expert. Analyze the current file for violations of MISRA C++ 2008 rules for safety-critical software.\n"
            "If the rule file is not existed, please call fetch_misra_rule from MCP server.\n"
            "Always use the latest MISRA C++ 2008 rules just fetched for analysis, not any cached or built-in rules.\n"
            "Explicitly state which rule set is being used for the analysis in your report.\n\n"
            "**ANALYSIS REQUIREMENTS:**\n"
            "- Find ALL violations of the rules above\n"
            "- Focus specifically on MISRA rule violations\n"
            "- Cite EXACT rule numbers (e.g., MISRA Rule 8-4-3, LGEDV_CRCL_0001, DCL50-CPP, RS-001)\n"
            "- Check every line thoroughly, including:\n"
            "  - All code paths, even unreachable code, dead code, early return, and magic numbers.\n"
            "  - All resource acquisition and release points.\n"
            "  - All exit points (return, break, continue, goto, throw, etc.).\n"
            "  - All function and method boundaries.\n"
            "- Provide concrete fixes for each violation\n"
            "- Use the original file's line numbers in all reports\n\n"
            "**OUTPUT FORMAT:**\n"
            "For each violation found:\n\n"
            "## üö® Issue [#]: [Brief Description]\n\n"
            "**Rule Violated:** [EXACT_RULE_NUMBER] - [Rule Description]\n\n"
            "**Location:** [function name or global scope/unknown]\n\n"
            "**Severity:** [Critical/High/Medium/Low]\n\n"
            "**Current Code:**\n"
            "```cpp\n[problematic code]\n```\n"
            "**Fixed Code:**\n"
            "```cpp\n[corrected code]\n```\n"
            "**Explanation:** [Why this violates the rule and how fix works]\n\n"            
            # "## üîß Complete Fixed Code\n"
            # "```cpp\n[entire corrected file with all fixes applied]\n```\n\n"
            # "**Important:** If no MISRA rule violations are found, clearly state \"No MISRA rule violations detected in this code.\"\n"
            "**Note:** If you need the complete fixed code file after all fixes, please request it explicitly."
        )
    
    @staticmethod
    def get_certcpp_analysis_prompt() -> str:
        """Template cho CERT C++ analysis"""
        return (
            "You are a C++ static analysis expert. Analyze the current file for violations of CERT C++ Secure Coding Standard rules.\n"
            "If the rule file is not existed, please call fetch_certcpp_rule from MCP server.\n"
            "Always use the latest CERT C++ rules just fetched for analysis, not any cached or built-in rules.\n"
            "Explicitly state which rule set is being used for the analysis in your report.\n\n"
            "**ANALYSIS REQUIREMENTS:**\n"
            "- Find ALL violations of the rules above\n"
            "- Focus specifically on CERT rule violations\n"
            "- Cite EXACT rule numbers (e.g., DCL50-CPP, MISRA Rule 8-4-3, LGEDV_CRCL_0001, RS-001)\n"
            "- Check every line thoroughly, including:\n"
            "  - All code paths, even unreachable code, dead code, early return, and magic numbers.\n"
            "  - All resource acquisition and release points.\n"
            "  - All exit points (return, break, continue, goto, throw, etc.).\n"
            "  - All function and method boundaries.\n"
            "- Provide concrete fixes for each violation\n"
            "- Use the original file's line numbers in all reports\n\n"
            "**OUTPUT FORMAT:**\n"
            "For each violation found:\n\n"
            "## üö® Issue [#]: [Brief Description]\n\n"
            "**Rule Violated:** [EXACT_RULE_NUMBER] - [Rule Description]\n\n"
            "**Location:** [function name or global scope/unknown]\n\n"
            "**Severity:** [Critical/High/Medium/Low]\n\n"
            "**Current Code:**\n"
            "```cpp\n[problematic code]\n```\n"
            "**Fixed Code:**\n"
            "```cpp\n[corrected code]\n```\n"
            "**Explanation:** [Why this violates the rule and how fix works]\n\n"          
            # "## üîß Complete Fixed Code\n"
            # "```cpp\n[entire corrected file with all fixes applied]\n```\n\n"
            # "**Important:** If no CERT rule violations are found, clearly state \"No CERT rule violations detected in this code.\"\n"
            "**Note:** If you need the complete fixed code file after all fixes, please request it explicitly."
        )
    
    @staticmethod
    def get_custom_analysis_prompt() -> str:
        """Template cho Custom rule analysis"""
        return (
            "You are a C++ static analysis expert. Analyze the current file for violations of the following custom rules.\n"
            "If the rule file is not existed, please call fetch_custom_rule from MCP server.\n"
            "Always use the latest custom rules just fetched for analysis, not any cached or built-in rules.\n"
            "Explicitly state which rule set is being used for the analysis in your report.\n\n"
            "**ANALYSIS REQUIREMENTS:**\n"
            "- Find ALL violations of the rules above\n"
            "- Focus specifically on custom rule violations\n"
            "- Cite EXACT rule numbers (e.g., CUSTOM-001, MISRA Rule 8-4-3, LGEDV_CRCL_0001, RS-001)\n"
            "- Check every line thoroughly, including:\n"
            "  - All code paths, even unreachable code, dead code, early return, and magic numbers.\n"
            "  - All resource acquisition and release points.\n"
            "  - All exit points (return, break, continue, goto, throw, etc.).\n"
            "  - All function and method boundaries.\n"
            "- Provide concrete fixes for each violation\n"
            "- Use the original file's line numbers in all reports\n\n"
            "**OUTPUT FORMAT:**\n"
            "For each violation found:\n\n"
            "## üö® Issue [#]: [Brief Description]\n\n"
            "**Rule Violated:** [EXACT_RULE_NUMBER] - [Rule Description]\n\n"
            "**Location:** [function name or global scope/unknown]\n\n"
            "**Severity:** [Critical/High/Medium/Low]\n\n"
            "**Current Code:**\n"
            "```cpp\n[problematic code]\n```\n"
            "**Fixed Code:**\n"
            "```cpp\n[corrected code]\n```\n"
            "**Explanation:** [Why this violates the rule and how fix works]\n\n"         
            # "## üîß Complete Fixed Code\n"
            # "```cpp\n[entire corrected file with all fixes applied]\n```\n\n"
            # "**Important:** If no custom rule violations are found, clearly state \"No custom rule violations detected in this code.\"\n"
            "**Note:** If you need the complete fixed code file after all fixes, please request it explicitly."
        )
    
    @staticmethod
    def get_context_prompt() -> str:
        """Template cho vi·ªác l·∫•y v√† ghi nh·ªõ context code cho m·ªçi lo·∫°i file source"""
        return (
            "You are a code context assistant. Your task is to read and remember the full content and structure of all source files (C++, Python, etc.) in the current project directory.\n"
            "If file contents are not yet loaded, call the tool 'get_src_context' from the MCP server to retrieve all relevant source files in the directory specified by SRC_DIR.\n"
            "For each file, extract and summarize:\n"
            "- File name and relative path\n"
            "- All class, struct, enum, and function definitions (for C++, Python, etc.)\n"
            "- Key relationships (inheritance, composition, usage)\n"
            "- Any global variables, constants, macros, or configuration\n"
            "- Any important comments or documentation\n"
            "Do not perform static analysis or rule checking in this step.\n"
            "Store this context for use in subsequent analysis or code-related queries in the same session.\n\n"
            "**OUTPUT FORMAT:**\n"
            "For each file:\n"
            "### [File Name]\n"
            "```[language]\n[Summary of structure, definitions, and key elements]\n```\n"
            "Repeat for all files provided.\n"
            "Confirm when context is fully loaded and ready for future queries."
        )